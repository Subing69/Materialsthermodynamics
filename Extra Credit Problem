import numpy as np
import sys!
{sys.executable} -m pip install pint
import os
os.environ['PINT_ARRAY_PROTOCOL_FALLBACK'] = "0"
import matplotlib.pyplot as plt
%pylab inline
import matplotlib
matplotlib.rcParams.update({'font.size': 24, 'text.usetex': False})
import numpy as np
# Melting and boiling points at 1 atm
T_melt_0 = 301.6*u.K
T_boil_0 = 944*u.K
P_0  = 1*u.atm
Melting point  = (301.6 kelvin, 1 standard_atmosphere)
Boiling point  = (944 kelvin, 1 standard_atmosphere)
# melting: solid to liquid 
H_melt = 2.09*u.kJ/u.mol
V_melt = 0.09*u.cc/u.mol
S_melt = H_melt/T_melt_0
# boiling: liquid to gas
H_boil = 63.9*u.kJ/u.mol
S_boil = H_boil/T_boil_0
T_melt = np.linspace(T_melt_0.magnitude-0.01,T_melt_0.magnitude+2,500)*u.K # array of temp points
P_melt_H = P_0 + H_melt/V_melt*np.log(T_melt/T_melt_0)                  # array of pressure point
P_melt_S = P_0 + S_melt/V_melt*(T_melt-T_melt_0)                        # array of pressure point
"Clausius Clapeyron slope = ", (S_melt/V_melt).to('MPa/K')
fig = plt.figure(figsize=(9,7))
plt.semilogy((T_melt/u.K).magnitude, (P_melt_H/u.Pa).magnitude, 'b-', linewidth=3.0)
plt.semilogy((T_melt/u.K).magnitude, (P_melt_S/u.Pa).magnitude, 'r--', linewidth=3.0)
plt.scatter([(T_melt_0/u.K).magnitude],[(P_0/u.Pa).magnitude],s=100, facecolors='none', edgecolors='k')
plt.xlabel('$T$ [K]')
plt.ylabel('$p$ [Pa]')
plt.title('Solid-Liquid Phase Boundary')
plt.show()
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '34 0 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [  ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
